#!/usr/bin/python
# -*- coding: utf-8 -*-
# Distributed under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.

import sys, re, os.path
from base64 import b64encode
from getopt import gnu_getopt, GetoptError


supported_base_types = {
    'int':          'p',
    'int8_t':       'p',
    'uint8_t':      'p',
    'int16_t':      'p',
    'uint16_t':     'p',
    'int32_t':      'p',
    'uint32_t':     'p',
    'int64_t':      'i64',
    'uint64_t':     'i64',
    'float':        'f64',
    'double':       'f64',
}

slots_h = (
"""/*
 * %(slots_h)s:
 *  Auto generate from %(def_file)s
 *  It will be rewritten next time run oil-regclasses
 */

#ifndef __%(encoded_slots_h_upper)s__
#define __%(encoded_slots_h_upper)s__

#include <inttypes.h>

#ifdef __cplusplus
extern "C" {
#endif
"""     ,
"""
/* %(cls_name)s: %(def_file)s:%(lineno)d */
extern void (*%(cls_name)s) (%(param_list)s);
"""     ,
"""
#ifdef __cplusplus
}
#endif

#endif /* __%(encoded_slots_h_upper)s__ */

""")

slots_c = (
"""/* 
 * %(slots_c)s:
 *  Auto generate from %(def_file)s
 *  It will be rewritten next time run oil-regclasses
 *  
 *  declares public function pointers
 */
#include <inttypes.h>
"""     ,
"""
%(comment)s/* %(cls_name)s: %(def_file)s:%(lineno)d */
void (*%(cls_name)s) (%(param_list)s);
"""     ,
"\n")

register_classes_c = (
"""/* 
 * %(reg_classes_c)s:
 *  Auto generate from %(def_file)s
 *  It will be rewritten next time run oil-regclasses
 *  Generate the class registration function
 */
#include <oilclass.h>
#include <inttypes.h>
void %(encoded_basename)s_register_classes ()
{
"""     ,
"""
    extern void %(cls_name)s_ref (%(param_list)s);
    extern void (*%(cls_name)s) (%(param_list)s);
    oil_class_register ("%(cls_name)s", %(cls_name)s_ref, (void **) & %(cls_name)s);
"""     ,
"\n}\n")

marshal_c = (
"""/* 
 * %(marshal_c)s:
 *  Auto generate from %(def_file)s
 *  It will be rewritten next time run oil-regclasses
 * 
 *  declares marshal functions for auto testing
 */
#include <inttypes.h>
#include <oiltest.h>
"""     ,
"""
void %(marshal)s (void *func, OilGenericType *args, OilProfiler *profiler)
{
    typedef void (*prototype) (%(marshal_t)s);
    prototype _f = (prototype) func;

%(cvt_args)s

    profiler->start (profiler);
    _f (%(args_list)s);
    profiler->stop (profiler);
}
"""     ,
"\n")

attach_classes_c = (
"""/* 
 * %(attach_classes_c)s:
 *  Auto generate from %(def_file)s
 *  It will be rewritten next time run oil-regclasses
 *  Generate function that attaching class_data to classes
 */
#include <oiltest.h>

void %(encoded_basename)s_attach_classes ()
{
"""     ,
"""
    extern void %(marshal)s (void *func, OilGenericType *args, OilProfiler *profiler);
    oil_test_attach_class_full ("%(cls_name)s", "%(param_list)s", %(marshal)s, &%(checker)s, &%(profiler)s);
"""     ,
"\n}\n")


class OilSyntaxError (Exception):
    pass

def parse (deffile):
    blank_line = re.compile ('^[ \t]*\n$')
    comment_start = re.compile ('^[ \t]*#')
    c_comment_start = re.compile ('^[ \t]*/\*')

    f = open (deffile, 'r')
    
    try:
        line = f.next ()
        lineno = 1

        seq_node = {}
        
        while 1:
            # eat blank
            while blank_line.match (line):
                lineno += 1
                line = f.next ()
            
            # process comment
            if comment_start.match (line):
                line_anchor = lineno
                comment_block = ''
                
                while 1:
                    comment_block += line.split ('#', 1)[-1]
                    lineno += 1
                    line = f.next ()
                    if not comment_start.match (line): break
                
                try:
                    parse_comment (seq_node, comment_block)
                except OilSyntaxError:
                    print >>sys.stderr, '[Ignore][comment][SyntaxError]: %s:%d\n%s' % (deffile, line_anchor, sys.exc_info ()[1])
                continue
            
            # process c comment
            if c_comment_start.match (line):
                line_anchor = lineno
                c_comment_block = ''
                
                while not '*/' in line:
                    c_comment_block += line
                    lineno += 1
                    line = f.next ()

                c_comment_block += (line.split('*/', 1)[0] + '*/\n')
                try:
                    parse_c_comment (seq_node, c_comment_block)
                except OilSyntaxError:
                    print >>sys.stderr, '[Ignore][C comment][SyntaxError]: %s:%d\n%s' % (deffile, line_anchor, sys.exc_info ()[1])
                    
                lineno += 1
                line = f.next ()
                continue
                # ignore left
            
            # process prototype
            line_anchor = lineno
            try:
                parse_prototype (seq_node, line)
            except OilSyntaxError:
                print >>sys.stderr, '[Ignore][prototype][SyntaxError]: %s:%d\n%s' %  (deffile, line_anchor, sys.exc_info ()[1])
            else:
                seq_node['lineno'] = line_anchor
                yield seq_node
                
            seq_node = {}
            lineno += 1
            line = f.next ()
            continue

    except StopIteration:
        pass
    
    f.close ()


def parse_c_comment (seq_node, c_comment):
    c_comments = seq_node.get ('c_comment', '')
    c_comments += c_comment
    seq_node ['c_comment'] = c_comments


def parse_comment (seq_node, comment):
    word = '[_a-zA-Z]\w*'

    key = '(?P<key>%s)' % word
    value = '(?P<value>%s)' % word
    
    pattern = '^[ \t]*' +  '@' + key + '[ \t]+' + value
    
    _r = seq_node.get ('comment', {})
    
    instruction = re.compile (pattern, re.MULTILINE)
    for m in instruction.finditer (comment):
        key = m.group ('key')
        value = m.group ('value')
        _r[key] = value
    
    seq_node['comment'] = _r


def parse_prototype (seq_node, prototype_string):
        word = '[_a-zA-Z]\w*'
        sep = '[ \t\n]+'
        pad = '[ \t\n]*'
        
        qual = '(?P<qual>%s(?:%s%s)*)' % (word, sep, word)
        starsep = '(?:%s(?P<star>\*(?:%s\*)*)%s|%s)' % (pad, pad, pad, sep)
        ret_type = '(?P<ret_type>%s)' % word
        func_name = '(?P<func_name>%s)' % word
        param_list = '\((?P<param_list>.*)\)'
        end = '%s(?:;%s)?' % (pad, pad)
        
        pattern = '^' + pad + '(?:(?:%s%s)?%s%s)?' % (qual, sep, ret_type, starsep) + func_name + pad + param_list + end + '$'
        prototype = re.compile (pattern)

        m = prototype.match (prototype_string)
        if not m:
            raise OilSyntaxError, 'Bad prototype: "%s"' % prototype_string
    
        r = m.groupdict ()

        if (r['ret_type'] != 'void' and r['ret_type'] != None) or r['star'] or r['qual']:
            raise OilSyntaxError, 'Return type should be void: "%s"' % prototype_string

        params = []
        for param in r['param_list'].split (','):
            params.append (_parse_parameter (param))
        
        cls_name = r['func_name']
        
        seq_node['prototype'] = (cls_name, params)


def _parse_parameter (a_param):
    word = '[_a-zA-Z]\w*'
    sep = '[ \t\n]+'
    pad = '[ \t\n]*'
    
    qual = '(?P<qual>%s(?:%s%s)*)' % (word, sep, word)
    starsep = '(?:%s(?P<star>\*(?:%s\*)*)%s|%s)' % (pad, pad, pad, sep)
    type = '(?P<type>%s)' % word
    arg = '(?P<arg>%s)' % word
    
    pattern = '^' + pad + "(?:%s%s)?" % (qual, sep) + type + starsep + arg + pad + '$'
    parameter = re.compile (pattern)
    
    m = parameter.match (a_param)
    if not m:
        raise OilSyntaxError, 'Bad parameter: "%s"' % a_param
    
    ret = ['param_type', 'arg']
    r = m.groupdict ()
    
    _q = r['qual'] or ''
    _t = r['type'] or ''
    _s = r['star'] or ''
    
    if _q and _q != 'const':
        raise OilSyntaxError, 'only support const qualified type: "%s"' % a_param
    if _t not in supported_base_types:
        raise OilSyntaxError, 'not supported type "%s": "%s"' % (a_param, _t)
    if len (_s) > 1:
        raise OilSyntaxError, 'only 1 level pointer allowed: "%s"' % a_param
    
    _full_type = ' '.join ([i for i in (_q, _t, _s) if i])
    _arg = r['arg']
    
    return (_full_type, _arg)

def gen_canonical_id (raw):
    if not re.compile ('^[\w\-\. \t]+$').match (raw):
        ret = b64encode (raw, '__')
        ret = ret.replace ('=', '_')
    else:
        ret = re.compile ('\W+').subn ("_", raw)[0]
    
    if not re.compile ('^[a-zA-Z_]').match (ret):
        ret = 'o' + ret

    return ret

if __name__ == '__main__':
    usage = """usage: %s <classes_def> [--rebuild-register] [--rebuild-attach]
output: <classes_def>-slots.c            <classes_def>-slots.h
        <classes_def>-register_classes.c
        <classes_def>-attach_classes.c   <classes_def>-marshal.c"""

    try:
        opts, left = gnu_getopt (sys.argv[1:], 'h', ['rebuild-register', 'rebuild-attach', 'help'])
    except GetoptError:
        print usage % sys.argv[0]
        sys.exit (-1)
    
    opts = [o[0] for o in opts]
    
    if '-h' in opts or '--help' in opts or len (left) != 1:
        print usage % sys.argv[0]
        sys.exit (0)
    
    rebuild_register_classes = '--rebuild-register' in opts
    rebuild_attach_classes = '--rebuild-attach' in opts
    
    def_file_path = left[0]
    
    try:
        basename = os.path.basename (def_file_path)
        defname = os.path.splitext (basename)[0]
        
        # build names of output files
        slots_hfn = defname + '-slots.h'
        slots_cfn = defname + '-slots.c'
        
        register_classes_cfn = defname + '-register-classes.c'
        
        marshal_cfn = defname + '-marshal.c'
        attach_classes_cfn = defname + '-attach-classes.c'
        
        build_register_classes = rebuild_register_classes or not os.path.lexists (register_classes_cfn)
        build_attach_classes = rebuild_attach_classes or not os.path.lexists (attach_classes_cfn)
        
        # try to raise IOError early if def_file_path not exists
        seq_nodes = parse (def_file_path)
        
        # open output files
        slots_hfile = open (slots_hfn, 'w')
        slots_cfile = open (slots_cfn, 'w')
        
        register_classes_cfile = build_register_classes and open (register_classes_cfn, 'w')
        
        marshal_cfile = open (marshal_cfn, 'w')
        attach_classes_cfile = build_attach_classes and open (attach_classes_cfn, 'w')
        
        tmpl_vars = {}
        # write head
        tmpl_vars['def_file'] = basename
        tmpl_vars['slots_h'] = slots_hfn
        tmpl_vars['encoded_slots_h_upper'] =  gen_canonical_id (slots_hfn).upper ()
        tmpl_vars['slots_c'] = slots_cfn
        tmpl_vars['reg_classes_c'] = register_classes_cfn
        tmpl_vars['encoded_basename'] = gen_canonical_id (defname)
        tmpl_vars['marshal_c'] = marshal_cfn
        tmpl_vars['attach_classes_c'] = attach_classes_cfn
        tmpl_vars['checker'] = 'oil_checker_default'
        tmpl_vars['profiler'] = 'oil_profiler_default'
        all_marshals = set ()
        
        slots_hfile.write (slots_h[0] % tmpl_vars)
        slots_cfile.write (slots_c[0] % tmpl_vars)
        
        register_classes_cfile and register_classes_cfile.write (register_classes_c[0] % tmpl_vars)
        
        marshal_cfile.write (marshal_c[0] % tmpl_vars)
        attach_classes_cfile and attach_classes_cfile.write (attach_classes_c[0] % tmpl_vars)
        
        for seq_node in seq_nodes:
            comment = seq_node.get ('comment', {})
            c_comment = seq_node.get ('c_comment', '')
            prototype = seq_node['prototype']
            
            tmpl_vars['lineno'] = seq_node['lineno']
            tmpl_vars['cls_name'] = prototype[0]
            tmpl_vars['param_list'] = ', '.join (['%s %s' % (p[0], p[1]) for p in prototype[1]])
            tmpl_vars['comment'] = c_comment
            
            _m = tuple (p[0] for p in prototype[1])
            all_marshals.add (_m)
            
            tmpl_vars['marshal'] = 'OIL_MARSHAL__%s' % '_'.join (_m).upper ().replace (' *', 'p').replace (' ', '_')
            
            if comment.has_key ('checker'):
                tmpl_vars['checker'] = comment['checker']
            if comment.has_key ('profiler'):
                tmpl_vars['profiler'] = comment['profiler']
            
            slots_hfile.write (slots_h[1] % tmpl_vars)
            slots_cfile.write (slots_c[1] % tmpl_vars)
        
            register_classes_cfile and register_classes_cfile.write (register_classes_c[1] % tmpl_vars)

            attach_classes_cfile and attach_classes_cfile.write (attach_classes_c[1] % tmpl_vars)
            
        # write body of marshal
        for _m in all_marshals:
            tmpl_vars['marshal'] = 'OIL_MARSHAL__%s' % '_'.join (_m).upper ().replace (' *', 'p').replace (' ', '_')
            tmpl_vars['marshal_t'] = ', '.join (_m)
            tmpl_vars['cvt_args'] = '\n'.join ('    %s _%d = (%s) (args + %d)->%s;' % (_m[i], i, _m[i], i, supported_base_types.get(_m[i], 'p')) for i in xrange (len (_m)))
            tmpl_vars['args_list'] = ', '.join ('_%d' %i for i in xrange (len (_m)))
            marshal_cfile.write (marshal_c[1] % tmpl_vars)
        
        # write tail
        slots_hfile.write (slots_h[2] % tmpl_vars)
        slots_cfile.write (slots_c[2] % tmpl_vars)
        
        register_classes_cfile and register_classes_cfile.write (register_classes_c[2] % tmpl_vars)
        
        marshal_cfile.write (marshal_c[2] % tmpl_vars)
        attach_classes_cfile and attach_classes_cfile.write (attach_classes_c[2] % tmpl_vars)
        
        # close output files
        slots_hfile.close ()
        slots_cfile.close ()
        
        register_classes_cfile and register_classes_cfile.close ()
        
        marshal_cfile.close ()
        attach_classes_cfile and attach_classes_cfile.close ()

    except KeyboardInterrupt:
        print 'Bye'
        sys.exit (0)
    except IOError:
        sys.exit ('[IOError] %s' % sys.exc_info ()[1])
    except OilSyntaxError:
        sys.exit ('[SyntaxError] %s' % sys.exc_info ()[1])
