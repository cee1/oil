# 1. (n|m)
# 2. [isd]s\d?
#    2.1 [isd]s
#    2.2 [isd]s\d
#       
#    len_spec = (\d+|([nm](p\d+)?))
#       1. \d+
#       2. [nm]
#       3. [nm]p\d+
#
# 3. [isd]\d?
#    3.1 [isd]
#    3.2 [isd]\d
#
# 4. [isd]\d?_{len_spec}
#    4.1 [isd]_{len_spec}
#    4.2 [isd]\d_{len_spec}
#
# 5. [isd]\d?_{len_spec1}x{len_spec2}
#    5.1 [isd]_{len_spec1}x{len_spec2}
#    5.2 [isd]\d_{len_spec1}x{len_spec2}

# cover: 2.1, 5.2 (1x1)
void copy8x8_u8 (uint8_t *d_8x8, int ds, uint8_t *s_8x8, int ss);

# cover: 2.2, 5.1 (1x1), 5.2 (1x1)
void diff8x8_average_s16_u8 (int16_t *d_8x8, uint8_t *s1_8x8, int ss1, uint8_t *s2_8x8, int ss2, uint8_t *s3_8x8, int ss3);

# cover: 1, 5.1 (1x2)
void rgb2rgba (uint8_t *d_4xn, uint8_t* s_3xn, int n);

# cover: 1, 4.1 (2), 4.2 (2)
void composite_over_argb (uint32_t *i_n, uint32_t *s1_n, int n);

# cover: 1, 2.2, 5.2 (1x2)
void multiply_and_acc_6xn_s16_u8 (int16_t *i1_6xn, int is1, int16_t *s1_6xn, int ss1, uint8_t *s2_6xn, int ss2, int n);

# cover: 1, 3.1
void squaresum_f64 (double *d, double *s, int n);

# cover: 1, 3.1, 3.2, 4.2 (1)
void lift_sub_mult_shift12 (int16_t *d, int16_t *s1, int16_t *s2, int16_t *s3, int16_t *s4_1, int n);

# cover: 1, 2.2, 4.1 (2), 5.2 (1x1, 1x3)
void sad12x12_12xn_u8 (uint32_t *d_n, uint8_t *s1_12x12, int ss1, uint8_t *s2_12xnp11, int ss2, int n);

# cover: 1, 3.1, 4.2 (1, 3)
void mas8_u8_l15 (uint8_t *d, uint8_t *s1_np7, int16_t *s2_8, int16_t *s3_2, int n);

